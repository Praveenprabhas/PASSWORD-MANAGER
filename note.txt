from tabulate import tabulate  --  this is used for showing the output in table formate in output terminal

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))) -- this is used for the connect the path from the importing the pyhton file from one folder to the another folder.



after login it should store the  _id  so we can identify the user and keep control over user data


Got it! If you want each user to only have control over their own data, you can implement an ownership system. Here's how you can approach it:

1. **Store Ownership in the Database**:
   - When users register, associate their data with their unique identifier (e.g., `user_id` or `username`).

   Example user data in the database:
   ```json
   {
       "user_id": "user123",
       "username": "example_user",
       "password": "hashed_password",
       "data": [
           {"record_id": "1", "info": "Data 1"},
           {"record_id": "2", "info": "Data 2"}
       ]
   }
   ```

2. **Authenticate Users**:
   - Use a login system to authenticate users and retrieve their unique identifier upon successful login.

3. **Restrict Data Access**:
   - When performing database operations, filter the data by the user's unique identifier. This ensures users can only view, modify, or delete their own data.

4. **Example Code**:
   Here's an example implementation:

   ```python
   class UserDataManager:
       def __init__(self, user_id):
           self.user_id = user_id

       def view_data(self):
           user_data = db_name.users.find_one({"user_id": self.user_id})
           if user_data and "data" in user_data:
               print("Your Data:")
               for record in user_data["data"]:
                   print(record)
           else:
               print("No data found.")

       def add_data(self):
           new_info = input("Enter new data: ")
           db_name.users.update_one(
               {"user_id": self.user_id},
               {"$push": {"data": {"record_id": str(uuid.uuid4()), "info": new_info}}}
           )
           print("Data added successfully.")

       def delete_data(self):
           record_id = input("Enter the record ID to delete: ")
           db_name.users.update_one(
               {"user_id": self.user_id},
               {"$pull": {"data": {"record_id": record_id}}}
           )
           print("Data deleted successfully.")

   # Example Usage
   logged_in_user_id = "user123"  # This would be retrieved during login
   user_manager = UserDataManager(logged_in_user_id)
   user_manager.view_data()
   user_manager.add_data()
   user_manager.delete_data()
   ```

### Explanation:
- The `UserDataManager` class restricts operations to data owned by the logged-in user.
- The `view_data`, `add_data`, and `delete_data` methods interact only with data associated with the `user_id`.

Would you like me to help expand on this or integrate it with your existing system?


user_creations:-



import sys
import os

# Add project root directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from db.db_connect import db_name  # Now it should work

import bcrypt

user = db_name['users']
print("Create an account :-")

while True:
    usersname = input("Username: ").strip()

    if not usersname:
        print("\nUsername cannot be empty.\n")
        continue

    if user.find_one({"username": usersname}):
        print("\nUsername already exists.\n")
        continue

    password = input("Password: ").strip()

    if not password:
        print("\nPassword cannot be empty.\n")
        continue

    # Hashing the password before storing
    hashed_password = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

    user.insert_one({"username": usersname, "password": hashed_password})
    print("\nAccount created successfully.\n")
    break




    (or)

import uuid
import sys
import os

# Add project root directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from db.db_connect import db_name  # Now it should work

user = db_name['users']
print("Create an account :-")
while True:
    usersname = input("username : ")
    username = usersname  # assign the input to the variable

    if len(username) == 0:  # corrected the condition
        print("\nusername is empty.\n")
    elif user.find_one({"username": usersname}):  # corrected the find_one method
        print("\nusername already exists.\n")
    else:
        password = input("password : ")
        password = password  # assign the input to the variable
        if password == "":
            print("\npassword is empty.\n")
        else:
            # Generate a unique ID for the user
            user_id = str(uuid.uuid4())

            # Insert user data into the database
            user.insert_one({"_id": user_id, "username": usersname, "password": password})
            print(f"\nAccount created successfully. Your user ID is {user_id}\n")
            break



import uuid
import sys
import os

# Add project root directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from db.db_connect import db_name  # Now it should work

user = db_name['users']
print("Create an account :-")
while True:
    usersname = input("username : ")
    username = usersname  # assign the input to the variable

    if len(username) == 0:  # corrected the condition
        print("\nusername is empty.\n")
    elif user.find_one({"username": usersname}):  # Check if username already exists
        print("\nusername already exists.\n")
    else:
        password = input("password : ")
        password = password  # assign the input to the variable
        if password == "":
            print("\npassword is empty.\n")
        else:
            # Generate a unique ID
            user_id = str(uuid.uuid4())

            # Check if the user_id is already present in the database
            if user.find_one({"_id": user_id}):
                print("\nGenerated ID is already present in the database. Regenerating...\n")
                continue  # Regenerate the ID and retry the loop
            else:
                # Insert user data if the user_id is unique
                user.insert_one({"_id": user_id, "username": usersname, "password": password})
                print(f"\nAccount created successfully. Your user ID is {user_id}\n")
                break


import uuid
import sys
import os

# Add project root directory to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from db.db_connect import db_name  # Now it should work

user = db_name['users']
print("Create an account :-")
while True:
    usersname = input("username : ")
    username = usersname  # assign the input to the variable

    if len(username) == 0:  # corrected the condition
        print("\nusername is empty.\n")
    elif user.find_one({"username": usersname}):  # Check if username already exists
        print("\nusername already exists.\n")
    else:
        password = input("password : ")
        password = password  # assign the input to the variable
        if password == "":
            print("\npassword is empty.\n")
        else:
            try:
                # Generate a unique ID for the user
                user_id = str(uuid.uuid4())

                # Insert user data with the unique ID
                user.insert_one({"_id": user_id, "username": usersname, "password": password})
                print(f"\nAccount created successfully. Your user ID is {user_id}\n")
                break
            except Exception as e:
                # Handle any exceptions (e.g., duplicate IDs)
                print(f"\nAn error occurred: {e}\n")




for random Generating unique identifier :-

import random

# Define the characters to choose from
numbers = "0123456789"
capital_letters = "ABCDEF"
# capital_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
small_letters = "abcdef"
# small_letters = "abcdefghijklmnopqrstuvwxyz"
symbols = "-"
# symbols = "!@#$%^&*()"

# Combine all characters
all_characters = numbers + capital_letters + small_letters + symbols

# Generate a random string of length 6
random_string = ''.join(random.choice(all_characters) for _ in range(6))
print("Random String:", random_string)



users_list.py(lastone):-

import sys
import os
from tabulate import tabulate  # Ensure you install this library: pip install tabulate

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from db.db_connect import db_name

# Assuming db_name['users'] is a MongoDB collection
user_collection = db_name['users']

# Fetch the data
data = []
for user in user_collection.find({}, {'sno': 1, 'username': 1, 'password': 1, '_id': 0}):  # Get specific fields
    data.append([user['sno'], user['username'], user['password']])

# Print in table format
headers = ["Sno", "Username", "Password"]
print(tabulate(data, headers, tablefmt="grid"))




# Get input from the user
username = input("Enter the username: ").strip()  # .strip() removes any extra spaces

# Check if the input is empty
if not username:  # This checks for empty strings or spaces
    print("Input cannot be empty. Please enter a valid username.")
else:
    # Perform your user existence check here
    user = user_collection.find_one({"username": username})
    if user is None:
        print(f"User '{username}' does not exist.")
    else:
        print(f"User '{username}' already exists.")
